---
- question: >-
    Mailing lists are broken and we need to send the announce to all our users.
    Write a script to send the announce to our list of users, which is stored in
    a csv file, of `name,username,alt-mail` called `iShouldntHaveThis.csv`.
  answer: |-
    ```bash
    while IFS=, read -r col1 col2 col3
    do
        echo "$col2@redbrick.dcu.ie" >> emails.txt
    done < iShouldNotHaveThis.csv

    var=$(tr '\n', ',' < emails.txt)
    email=$(cat announce.txt)
    echo "Subject:Test
    From:branch@redbrick.dcu.ie

    $email" | sendmail -t $var
    ```
  mark: 3
  years:
    2017:
      - AGM
    2018:
      - AGM

- question: >-
    Write a script that takes usernames and password hashes from `/etc/shadow`.
    The script should then try and crack them using john the ripper. If the
    password is found in under 10 minutes email the user their password and tell
    them itâ€™s shit.
  answer: |-
    ```bash
    unshadow /etc/passwd /etc/shadow.txt > passwords.txt
    john --wordlist=/usr/share/wordlists/sqlmap.txt passwords.txt
    john --show passwords.txt
    ```
  mark: 10
  years:
    2017:
      - AGM

- question: >-
    You've realised that we run a 10 year old version of php and update it. All
    the old php scripts break. Turns out users with old mysql password, with a
    hash of length 16 bit, need to reset their password. Write a script to find
    all users who need to change their with the old passwords, email them saying
    they need to change their password and that their php has been disabled. The
    script should also disable those users php if it access mysql.
  mark: 10
  years:
    2017:
      - AGM

- question: >-
    Write a script to scan all users' web directories for world editable files.
    Change their permissions to the correct permissions and email the user
    telling them the file you changed and why this is important.
  mark: 5
  years:
    2017:
      - AGM

- question: Write something to make us laugh.
  answer: |-
    ```python
    from rb_committee import meeting
    import mcmahon

    while meeting == True:
        mcmahon.doesPutUpHisHandOnce()
    ```
    ```bash
    #!/bin/bash
    (echo "The best kind of errors, are the ones you can't see :)" && \
    python3 ThIsfiLEdoEsNTexISt.py) 2> /dev/null
    ```
    ```bash
    figlet DONGS
    ```
  mark: 2
  years:
    2013:
      - AGM
    2017:
      - AGM
    2018:
      - AGM

- question: >-
    Write a script to retrieve the logs of all currently running Docker
    containers on a system, and compress each one into a `.tar` file with the
    same name as the source container.
  years:
    2018:
      - AGM

- question: >-
    We are replacing tcsh because it is shit. Find all users with tcsh, and
    change their shell to bash. Email the user to tell them of the change
  answer: |-
    ```bash
    #!/bin/bash

    tcshusers=$(getent passwd | grep tcsh | cut -d: -f 1)
    for user in $tcshusers
    do
       chsh $user -s /bin/bash
       echo "We changed your shell" | mail -s "chsh" "$user@redbrick.dcu.ie"
    done
    ```
  years:
    2013:
      - AGM

- question: >-
    It has come to our attention that a number of users have been storing out of
    date lecture notes on their webspace. We have been provided with a copy of
    each of the files. Scan /webtree for any copies of these files and if they
    are world readable and not password protected email admins if one is found.
    (You can ignore users home directories for this question.)
  answer: |-
    ```python
    import hashlib
    import smtplib
    import subprocess
    from email.mime.text import MIMEText

    # Many enhancements could be made to this, but It is at least correct.
    # This solution assumes that we cannot take into account the file extension.
    # get a list of all the lecture files.
    # This assumes they are in "./files"
    findoutput = subprocess.check_output(["find", "./files", "-type", "f"])
    lecfiles = findoutput.split("\n")[:-1]

    # md5 hashes the files and puts these hashes into a list
    lecture_md5s = []
    for f in lecfiles:
        lecture_md5s.append(hashlib.md5(open(f, "rb").read()).hexdigest())

    # get a list of all world-readable files from /webtree
    findoutput = subprocess.check_output(
        ["find", "/webtree", "-type", "f", "-perm", "/o+r"]
    )
    webtreefiles = findoutput.split("\n")[:-1]

    # Make a dictionary of file paths to MD5 sums of the world-readable files
    # of /webtree
    webtree_dict = {}
    for f in webtreefiles:
        webtree_dict[f] = hashlib.md5(open(f, "rb").read()).hexdigest()

    violations = []
    for f, md5 in webtree_dict.iteritems():
        if md5 in lecture_md5s:
            violations.append(md5 + " " + f)

    violations_string = "\n".join(violations)
    msg = MIMEText(violations_string)
    msg["subject"] = "world-readable lecture notes"
    msg["from"] = "notesbot"
    msg["to"] = "gw@redbrick.dcu.ie"

    s = smtplib.SMTP("localhost")
    s.sendmail("notesbot", "gw@redbrick.dcu.ie", msg)
    s.quit()
    ```
  years:
    2013:
      - AGM

- question: >-
    We believe that a number of users are abusing redbrick services.
    Specifically they are running programs that are not allowed. Write a script
    that takes a list of usernames as an argument and will detect if they are
    running any of these programs. If you see the same user running banned
    programs more than 3 times automatically change their shell to disusered.
    Email admins to inform us of the users poor choices. (You may choose which
    programs are banned.)
  answer: |-
    ```bash
    #!/bin/bash
    userlist=$1
    bannedprocs="ssh|mutt|vim"
    email="banned users were:\n\n"
    for user in $userlist; do
       numprocs=$(pgrep -u $user -c $bannedprocs"")
       if [ $numprocs -gt 3 ]; then
          chsh $user -s /usr/local/shells/disusered
          email="$email $user"
       fi
    done
    echo "$email" | mail -s "people got banned" admins@redbrick.dcu.ie
    ```
  years:
    2013:
      - AGM
